식별자

변수 이름을 식별자라고도 한다.
식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.
사람 중 영희를 구분할 수 있듯이 30도 식별자로 구별할 수 있다.

값은 메모리 공간에 저장되어 있다. 
따라서 식별자는 메모리 공간에 저장되어 있는 값을
구별해서 식별할 수 있어야 한다.
즉 식별자는 어떤 값이 저장되어 있는 메모리 주소를 기억해야 한다.

식별자 result는 값 30을 식별할 수 있었다.
이를 위해 식별자 result는 값 30이 저장된 메모리 주소 0x0669F913을 기억해야 한다.
식별자는 값이 저장되어 있는 메모리 주소와 매핑 관계를 맺으며, 매핑 정보도 메모리에 저장되어야 한다.

이처럼 식별자는 값이 아니라 메모리 주소를 기억하고 있다.
식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다.
즉, 식별자는 메모리 주소에 붙인 이름이라고 할 수 있다.

변수, 함수, 클래스 등의 이름과 같은 식별자는 네이밍 규칙을 준수해야하며, 선언에 의해 자바스크립트 엔진에 식별자의 존재를 알린다.
변수를 선언하는 방법을 살펴보자.

변수 선언

변수 선언이란 변수를 생성하는 것이다.
좀 더 자세히 말하면 값을 저장하기 위한 메모리 공간을 확보하고 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것이다.
변수 선언에 의해 확보된 메모리 공간은 확보가 해제되기 전까지는 누구도 확보된 메모리 공간을 사용할 수 없도록 보호되므로 안전하게 사용할 수 있다.

변수를 사용하려면 반드시 선언이 필요하다. var, let, const 키워드를 사용한다.
ES6에서 let, const 키워드가 도입되기 이전까지 var 키워드는 유일한 변수 키워드였다. var에 대해 알아보고 이후 let, const를 알아보자

var는 블록 레벨 스코프를 지원하지 않고, 함수레벨 스코프를 지원한다.
이로 인해 의도치 않게 전역 변수가 선언되어 심각항 부작용이 발생하기도 한다.

let, const는 이 단점을 보완하기 위해서 나왔고, var를 이해해야만 알 수 있는 부분들이 많다. 이러한 부분들을 알아보자.
ES6은 기본적으로 하위 호환성을 유지하기 때문에 var가 남아있다. 해당 변수를 사용해보자

예제
var score; // 변수 선언(변수 선언문)
여기서 var 키워드를 만나면 뒤에 오는 변수 이름으로 새로운 변수를 선언한다.
변수 이름을 등록 후 메모리 공간을 확보한다.

<이미지>

변수를 생성 이후 딱히 값이 설정되지 않았다면 자바스크립트 엔진에 의해 undefined라는 값이 암묵적으로 할당되어 초기화된다. 이는 자바스크립트의 독특한 특징이다.
undefined는 자바스크립트에서 제공하는 원시 타입(primitive value)값이다.

자바스크립트 엔진 2단계를 거쳐 수행한다.
- 선언단계: 변수 이름을 등록해 자바스크립트 엔진에 변수의 존재를 알린다.
- 초기화 단계: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.

변수 이름을 비롯한 모든 식별자는 실행 컨텍스트에 기록된다. 실행 컨텍스트는 자바스크립트 엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.
자바스크립트 엔진은 실행 컨텍스트를 통해 식별자와 스코프를 관리한다.

변수 이름과 변수 값을 실행 컨텍스트 내에 키(key), 값(value) 형식인 객체로 등록되어 관리된다. 이에 대한 매커니즘은 13, 23장에서 자세히 살펴보자.

var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행된다.
var score; 는 선언 단계를 통해 변수 이름 score를 등록하고, 초기화 단계를 통해 score 변수에 암묵적으로 undefined를 할당해 초기화한다.

일반적으로 초기화란 변수가 선언된 이후 최초로 값을 할당하는 것을 말한다. var 키워드로 선언한 변수는 undefined로 암묵적인 초기화가 자동 수행된다.
따라서 var 키워드로 선언한 변수는 어떠한 값도 할당하지 않아도 undefined라는 값을 받는다.

만약 초기화 단계를 거치지 않으면 확보된 메모리 공간에서는 이전에 다른 애플리케이션이 사용했던 값이 남아있을 수 있다.
이러한 값을 쓰레기 값(Garbage value)이라고 한다. 따라서 메모리 공간을 확보한 다음,
값을 할당하지 않은 상태에서 곧바로 변수 값을 참조하면 쓰레기 값이 나올 수 있다.
vvar 키워드는 암묵적으로 초기화를 수행해 위험으로부터 안전한다.

변수를 사용하려면 반드시 선언이 필요하다. 
변수뿐만 아니라 모든 식별자(함수, 클래스 등)가 그렇다.
만약 선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러)가 발생한다. ReferenceError는 식별자를 통해 값을 참조하려 했지만, 
자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.
